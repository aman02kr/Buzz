{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","align","maxW","mx","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","color","Button","h","onClick","handleClick","colorScheme","mt","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","style","marginTop","Homepage","Container","fontFamily","centerContent","Box","d","justifyContent","bg","w","m","Text","fontSize","borderRadius","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","borderWidth","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.fa7bc007.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\" align=\"stretch\" maxW=\"400px\" mx=\"auto\" >\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\" color=\"black\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        mt=\"4\"\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n        mt=\"2\"\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\" color=\"black\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\" color=\"black\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\nimport { white } from \"colors\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\"fontFamily=\"Work sans\" centerContent>\n    <Box\n      d=\"flex\"\n      justifyContent=\"center\"\n      p={3}\n      bg=\"transparent\"\n      w=\"100%\"\n      m=\"40px 0 15px 0\"\n      \n    >\n      <Text fontSize=\"4xl\"  color=\"white\" > {/* Set the text color to white */}\n        BUZZ\n      </Text>\n    </Box>\n    <Box w=\"100%\" p={4} bg=\"blackAlpha.600\" color=\"white\" borderRadius=\"md\"> {/* Change the background color to light gray */}\n      <Tabs isFitted variant=\"rounded\" >\n        <TabList mb=\"2em\">\n          <Tab>Login</Tab>\n          <Tab>Sign Up</Tab>\n        </TabList>\n        <TabPanels>\n          <TabPanel>\n            <Login/>\n          </TabPanel>\n          <TabPanel>\n            <Signup/>\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </Box>\n  </Container>\n);\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon color=\"black\" />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent bg=\"#9D8EA5\" h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#30D2A8\" : \"#4CB5DF\"\n                }`,\n                color:\"white\",\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction ,user}) => {\n  \n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon color=\"black\" />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent bg=\"#9D8EA5\">\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            \n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon color=\"black\"/>}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            color=\"black\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"blackAlpha.500\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    \n                    style={{ marginBottom: 15, marginLeft: 0}}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n                color=\"white\"\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box \n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      color='white'\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent bg=\"#9D8EA5\">\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Aman, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n                \n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"transparent\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Text color=\"white\">My Chats</Text>\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"blackAlpha.500\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n         bg=\"blackAlpha.500\"\n        w=\"auto\"\n        p=\"5px 10px 5px 10px\"\n        borderRadius=\"5px\"\n        m=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" bg=\"grey\"onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"3xl\" fontFamily=\"Work sans\" color=\"white\">\n          BUZZ\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button}bg=\"whiteAlpha.700\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer  placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent  bg=\"#9D8EA5\">\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\"  pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}